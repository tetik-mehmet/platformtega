"use client";
import { useState, useEffect, useRef } from "react";
import { useRouter } from "next/navigation";

export default function OdakliOkuma() {
  const router = useRouter();
  const [words, setWords] = useState([]);
  const [currentWordIndex, setCurrentWordIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  const [wordCount, setWordCount] = useState(50);
  const [timeLeft, setTimeLeft] = useState(60);
  const [isStarted, setIsStarted] = useState(false);
  const [customDuration, setCustomDuration] = useState(60); // KullanÄ±cÄ± tarafÄ±ndan ayarlanan sÃ¼re
  const [wordSpeed, setWordSpeed] = useState(1); // Kelime gÃ¶sterim hÄ±zÄ± (1x, 2x, 3x gibi)
  const intervalRef = useRef(null);

  const metin =
    "Ä°nsanlÄ±k tarihi boyunca doÄŸa, insan yaÅŸamÄ±nÄ±n en temel unsuru olmuÅŸtur. Ä°nsanlar, varoluÅŸlarÄ±nÄ±n ilk anlarÄ±ndan itibaren doÄŸadan beslenmiÅŸ, doÄŸada barÄ±nmÄ±ÅŸ ve doÄŸanÄ±n sunduÄŸu kaynaklarÄ± kullanarak yaÅŸamlarÄ±nÄ± sÃ¼rdÃ¼rmÃ¼ÅŸlerdir. DoÄŸa, insan iÃ§in hem bir yaÅŸam alanÄ± hem de bir Ã¶ÄŸretici olmuÅŸtur. Fakat zamanla insanoÄŸlunun doÄŸaya yaklaÅŸÄ±mÄ± deÄŸiÅŸmiÅŸ, bu kadim iliÅŸkinin dengesi bozulmuÅŸtur. GÃ¼nÃ¼mÃ¼zde doÄŸa ve insan arasÄ±ndaki iliÅŸki, hem iÅŸ birliÄŸi hem de Ã§atÄ±ÅŸma boyutlarÄ±yla deÄŸerlendirilmektedir.";

  // Metni kelimelere ayÄ±r ve her kelimede rastgele bir harfi kÄ±rmÄ±zÄ± yap
  const prepareWords = () => {
    const wordArray = metin.split(/\s+/).filter((word) => word.length > 0);
    const processedWords = wordArray.map((word) => {
      const randomIndex = Math.floor(Math.random() * word.length);
      return {
        text: word,
        redLetterIndex: randomIndex,
      };
    });
    return processedWords;
  };

  // Oyunu baÅŸlat
  const startGame = () => {
    const preparedWords = prepareWords();
    setWords(preparedWords.slice(0, wordCount));
    setCurrentWordIndex(0);
    setIsPlaying(true);
    setIsStarted(true);
    setTimeLeft(customDuration);
  };

  // Oyunu durdur
  const stopGame = () => {
    setIsPlaying(false);
    setIsStarted(false);
    setCurrentWordIndex(0);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
    }
  };

  // Oyunu sÄ±fÄ±rla
  const resetGame = () => {
    stopGame();
    setWords([]);
    setCurrentWordIndex(0);
    setTimeLeft(customDuration);
  };

  // Kelime gÃ¶sterimi iÃ§in interval
  useEffect(() => {
    if (isPlaying && words.length > 0) {
      // Kelime gÃ¶sterim hÄ±zÄ±nÄ± hesapla
      const baseInterval = (customDuration * 1000) / words.length;
      const adjustedInterval = baseInterval / wordSpeed;

      const interval = setInterval(() => {
        setCurrentWordIndex((prev) => {
          if (prev >= words.length - 1) {
            setIsPlaying(false);
            return prev;
          }
          return prev + 1;
        });
      }, adjustedInterval);

      intervalRef.current = interval;
      return () => clearInterval(interval);
    }
  }, [isPlaying, words.length, customDuration, wordSpeed]);

  // Geri sayÄ±m
  useEffect(() => {
    if (isPlaying && timeLeft > 0) {
      const timer = setInterval(() => {
        setTimeLeft((prev) => prev - 1);
      }, 1000);
      return () => clearInterval(timer);
    } else if (timeLeft === 0) {
      setIsPlaying(false);
    }
  }, [isPlaying, timeLeft]);

  // Kelimeyi render et
  const renderWord = (word) => {
    if (!word) return null;

    return word.text.split("").map((letter, index) => (
      <span
        key={index}
        className={`text-4xl font-bold ${
          index === word.redLetterIndex ? "text-red-500" : "text-gray-800"
        }`}
      >
        {letter}
      </span>
    ));
  };

  // HÄ±z seÃ§enekleri
  const speedOptions = [
    { value: 0.5, label: "0.5x (YavaÅŸ)" },
    { value: 1, label: "1x (Normal)" },
    { value: 1.5, label: "1.5x (HÄ±zlÄ±)" },
    { value: 2, label: "2x (Ã‡ok HÄ±zlÄ±)" },
    { value: 3, label: "3x (Ultra HÄ±zlÄ±)" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-800 mb-2">
            OdaklÄ± Okuma
          </h1>
          <p className="text-gray-600">
            Kelimeleri tek tek okuyarak odaklanma becerinizi geliÅŸtirin
          </p>
        </div>

        {/* Kontrol Paneli */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-center">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Kelime SayÄ±sÄ±
              </label>
              <input
                type="number"
                min="10"
                max="100"
                value={wordCount}
                onChange={(e) => setWordCount(parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isStarted}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Toplam SÃ¼re (saniye)
              </label>
              <input
                type="number"
                min="30"
                max="300"
                value={customDuration}
                onChange={(e) => setCustomDuration(parseInt(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isStarted}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                GÃ¶sterim HÄ±zÄ±
              </label>
              <select
                value={wordSpeed}
                onChange={(e) => setWordSpeed(parseFloat(e.target.value))}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                disabled={isStarted}
              >
                {speedOptions.map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>

            <div className="text-center">
              <div className="text-2xl font-bold text-blue-600">
                {Math.floor(timeLeft / 60)}:
                {(timeLeft % 60).toString().padStart(2, "0")}
              </div>
              <div className="text-sm text-gray-600">Kalan SÃ¼re</div>
            </div>
          </div>

          {/* Butonlar */}
          <div className="flex gap-2 justify-center mt-6">
            {!isStarted ? (
              <button
                onClick={startGame}
                className="bg-green-500 hover:bg-green-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                BaÅŸla
              </button>
            ) : (
              <>
                <button
                  onClick={stopGame}
                  className="bg-yellow-500 hover:bg-yellow-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  Durdur
                </button>
                <button
                  onClick={resetGame}
                  className="bg-red-500 hover:bg-red-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
                >
                  SÄ±fÄ±rla
                </button>
              </>
            )}
          </div>
        </div>

        {/* Bilgi Paneli */}
        <div className="bg-blue-50 rounded-lg p-4 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center text-sm text-blue-800">
            <div>
              <div className="font-semibold">Kelime BaÅŸÄ±na SÃ¼re</div>
              <div className="text-lg font-bold">
                {words.length > 0
                  ? (customDuration / wordSpeed / words.length).toFixed(2)
                  : 0}{" "}
                saniye
              </div>
            </div>
            <div>
              <div className="font-semibold">Toplam SÃ¼re</div>
              <div className="text-lg font-bold">{customDuration} saniye</div>
            </div>
            <div>
              <div className="font-semibold">HÄ±z Ã‡arpanÄ±</div>
              <div className="text-lg font-bold">{wordSpeed}x</div>
            </div>
          </div>
        </div>

        {/* Ä°lerleme Ã‡ubuÄŸu */}
        {isStarted && (
          <div className="bg-white rounded-lg shadow-lg p-4 mb-8">
            <div className="flex justify-between text-sm text-gray-600 mb-2">
              <span>
                Ä°lerleme: {currentWordIndex + 1} / {words.length}
              </span>
              <span>
                {Math.round(((currentWordIndex + 1) / words.length) * 100)}%
              </span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div
                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                style={{
                  width: `${((currentWordIndex + 1) / words.length) * 100}%`,
                }}
              ></div>
            </div>
          </div>
        )}

        {/* Kelime GÃ¶sterimi */}
        <div className="bg-white rounded-lg shadow-lg p-12 min-h-96 flex items-center justify-center">
          {!isStarted ? (
            <div className="text-center text-gray-500">
              <div className="text-6xl mb-4">ðŸ“š</div>
              <p className="text-xl">
                AyarlarÄ± yapÄ±p BaÅŸla butonuna tÄ±klayarak oyunu baÅŸlatÄ±n
              </p>
            </div>
          ) : words.length > 0 && currentWordIndex < words.length ? (
            <div className="text-center">
              <div className="mb-4">{renderWord(words[currentWordIndex])}</div>
              <div className="text-sm text-gray-500">
                Kelime {currentWordIndex + 1} / {words.length}
              </div>
            </div>
          ) : (
            <div className="text-center text-green-600">
              <div className="text-6xl mb-4">ðŸŽ‰</div>
              <p className="text-xl font-bold">
                Tebrikler! TÃ¼m kelimeleri okudunuz!
              </p>
              <button
                onClick={resetGame}
                className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
              >
                Tekrar Oyna
              </button>
            </div>
          )}
        </div>

        {/* Geri DÃ¶n Butonu */}
        <div className="text-center mt-8">
          <button
            onClick={() => router.push("/")}
            className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-medium transition-colors"
          >
            Ana Sayfaya DÃ¶n
          </button>
        </div>
      </div>
    </div>
  );
}
